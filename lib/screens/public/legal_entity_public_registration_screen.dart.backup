import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:uuid/uuid.dart';
import '../../models/pricing.dart';
import '../../models/user.dart' show AppUser;
import '../../models/legal_entity.dart';
import '../../services/supabase_service.dart';
import '../../services/image_upload_service.dart';
import '../../widgets/custom_button.dart';
import '../../widgets/custom_text_field.dart';

class LegalEntityPublicRegistrationScreen extends StatefulWidget {
  const LegalEntityPublicRegistrationScreen({super.key});

  @override
  State<LegalEntityPublicRegistrationScreen> createState() =>
      _LegalEntityPublicRegistrationScreenState();
}

class _LegalEntityPublicRegistrationScreenState
    extends State<LegalEntityPublicRegistrationScreen> {
  final _formKey = GlobalKey<FormState>();
  final _personalFormKey = GlobalKey<FormState>();
  final _entityFormKey = GlobalKey<FormState>();

  // Step management
  int _currentStep = 0;
  final int _totalSteps = 3;

  // Pricing
  Pricing? _selectedPricing;

  // Personal information
  final _personalNameController = TextEditingController();
  final _personalEmailController = TextEditingController();
  final _personalPhoneController = TextEditingController();
  File? _personalProfilePicture;

  // Legal entity information
  final _legalNameController = TextEditingController();
  final _identifierCodeController = TextEditingController();
  final _entityEmailController = TextEditingController();
  final _legalRepresentativeController = TextEditingController();
  final _operationalAddressController = TextEditingController();
  final _operationalCityController = TextEditingController();
  final _operationalPostalCodeController = TextEditingController();
  final _operationalStateController = TextEditingController();
  final _operationalCountryController = TextEditingController();
  final _headquarterAddressController = TextEditingController();
  final _headquarterCityController = TextEditingController();
  final _headquarterPostalCodeController = TextEditingController();
  final _headquarterStateController = TextEditingController();
  final _headquarterCountryController = TextEditingController();
  final _phoneController = TextEditingController();
  final _pecController = TextEditingController();
  final _websiteController = TextEditingController();
  File? _entityProfilePicture;
  File? _entityCompanyPicture;

  // Loading states
  bool _isLoading = false;

  // Services
  final SupabaseService _supabaseService = SupabaseService();
  final ImageUploadService _imageUploadService = ImageUploadService();
  final ImagePicker _imagePicker = ImagePicker();

  @override
  void initState() {
    super.initState();
    _loadUrlParameters();
  }

  @override
  void dispose() {
    _personalNameController.dispose();
    _personalEmailController.dispose();
    _personalPhoneController.dispose();
    _legalNameController.dispose();
    _identifierCodeController.dispose();
    _entityEmailController.dispose();
    _legalRepresentativeController.dispose();
    _operationalAddressController.dispose();
    _operationalCityController.dispose();
    _operationalPostalCodeController.dispose();
    _operationalStateController.dispose();
    _operationalCountryController.dispose();
    _headquarterAddressController.dispose();
    _headquarterCityController.dispose();
    _headquarterPostalCodeController.dispose();
    _headquarterStateController.dispose();
    _headquarterCountryController.dispose();
    _phoneController.dispose();
    _pecController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  void _loadUrlParameters() {
    // TODO: Implementare caricamento parametri da URL
    // Per ora usiamo valori di default
    _operationalCountryController.text = 'Italy';
    _headquarterCountryController.text = 'Italy';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Registrazione Entità Legale'),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
      ),
      body: Column(
        children: [
          // Progress indicator
          _buildProgressIndicator(),

          // Main content
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    if (_currentStep == 0) _buildPricingStep(),
                    if (_currentStep == 1) _buildPersonalInfoStep(),
                    if (_currentStep == 2) _buildLegalEntityStep(),
                  ],
                ),
              ),
            ),
          ),

          // Navigation buttons
          _buildNavigationButtons(),
        ],
      ),
    );
  }

  Widget _buildProgressIndicator() {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          Row(
            children: List.generate(_totalSteps, (index) {
              final isCompleted = index < _currentStep;
              final isCurrent = index == _currentStep;

              return Expanded(
                child: Container(
                  height: 4,
                  margin: EdgeInsets.only(
                    right: index < _totalSteps - 1 ? 8 : 0,
                  ),
                  decoration: BoxDecoration(
                    color: isCompleted || isCurrent
                        ? Colors.blue
                        : Colors.grey.shade300,
                    borderRadius: BorderRadius.circular(2),
                  ),
                ),
              );
            }),
          ),
          const SizedBox(height: 8),
          Text(
            'Step ${_currentStep + 1} di $_totalSteps',
            style: const TextStyle(fontSize: 14, color: Colors.grey),
          ),
        ],
      ),
    );
  }

  Widget _buildPricingStep() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Seleziona il Piano',
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 16),
        const Text(
          'Scegli il piano più adatto alla tua azienda per continuare con la registrazione.',
          style: TextStyle(fontSize: 16, color: Colors.grey),
        ),
        const SizedBox(height: 24),
        // TODO: Implementare selezione pricing
        Card(
          child: ListTile(
            title: const Text('Starter - €99/anno'),
            subtitle: const Text('Piano base per piccole aziende'),
            trailing: Checkbox(
              value: _selectedPricing != null,
              onChanged: (bool? value) {
                setState(() {
                  // TODO: Set selected pricing from provider
                  _selectedPricing = value == true ? null : null; // Placeholder
                });
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPersonalInfoStep() {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
        const Text(
          'Informazioni Personali',
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 16),
        const Text(
          'Inserisci le tue informazioni personali per creare l\'account.',
          style: TextStyle(fontSize: 16, color: Colors.grey),
        ),
        const SizedBox(height: 24),

        // Profile picture
        Center(
          child: Column(
            children: [
              CircleAvatar(
                radius: 50,
                backgroundImage: _personalProfilePicture != null
                    ? FileImage(_personalProfilePicture!)
                    : null,
                child: _personalProfilePicture == null
                    ? const Icon(Icons.person, size: 50)
                    : null,
              ),
              const SizedBox(height: 16),
              CustomButton(
                onPressed: _pickPersonalProfilePicture,
                text: 'Carica Foto Profilo',
                backgroundColor: Colors.grey,
              ),
            ],
          ),
        ),
        const SizedBox(height: 24),

        // Personal information form
        Form(
          key: _personalFormKey,
          child: Column(
            children: [
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _personalNameController,
                  labelText: 'Nome Completo *',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Inserisci il tuo nome completo';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _personalEmailController,
                  labelText: 'Email *',
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Inserisci la tua email';
                    }
                    if (!RegExp(
                      r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$',
                    ).hasMatch(value)) {
                      return 'Inserisci un\'email valida';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _personalPhoneController,
                  labelText: 'Telefono',
                  keyboardType: TextInputType.phone,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildLegalEntityStep() {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
        const Text(
          'Informazioni Entità Legale',
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 16),
        const Text(
          'Inserisci le informazioni della tua azienda.',
          style: TextStyle(fontSize: 16, color: Colors.grey),
        ),
        const SizedBox(height: 24),

        // Company pictures
        Row(
          children: [
            Expanded(
              child: Column(
                children: [
                  CircleAvatar(
                    radius: 40,
                    backgroundImage: _entityProfilePicture != null
                        ? FileImage(_entityProfilePicture!)
                        : null,
                    child: _entityProfilePicture == null
                        ? const Icon(Icons.business, size: 40)
                        : null,
                  ),
                  const SizedBox(height: 8),
                  CustomButton(
                    onPressed: _pickEntityProfilePicture,
                    text: 'Logo Azienda',
                    backgroundColor: Colors.grey,
                  ),
                ],
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                children: [
                  CircleAvatar(
                    radius: 40,
                    backgroundImage: _entityCompanyPicture != null
                        ? FileImage(_entityCompanyPicture!)
                        : null,
                    child: _entityCompanyPicture == null
                        ? const Icon(Icons.photo_camera, size: 40)
                        : null,
                  ),
                  const SizedBox(height: 8),
                  CustomButton(
                    onPressed: _pickEntityCompanyPicture,
                    text: 'Foto Azienda',
                    backgroundColor: Colors.grey,
                  ),
                ],
              ),
            ),
          ],
        ),
        const SizedBox(height: 24),

        // Legal entity form
        Form(
          key: _entityFormKey,
          child: Column(
            children: [
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _legalNameController,
                  labelText: 'Nome Entità Legale *',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Inserisci il nome dell\'entità legale';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _identifierCodeController,
                  labelText: 'Codice Identificativo *',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Inserisci il codice identificativo';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _entityEmailController,
                  labelText: 'Email Aziendale *',
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Inserisci l\'email aziendale';
                    }
                    if (!RegExp(
                      r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$',
                    ).hasMatch(value)) {
                      return 'Inserisci un\'email valida';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _legalRepresentativeController,
                  labelText: 'Rappresentante Legale *',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Inserisci il rappresentante legale';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(height: 16),

              // Operational address
              const Text(
                'Indirizzo Operativo',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _operationalAddressController,
                  labelText: 'Indirizzo',
                ),
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      controller: _operationalCityController,
                      labelText: 'Città',
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: CustomTextField(
                      controller: _operationalPostalCodeController,
                      labelText: 'CAP',
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      controller: _operationalStateController,
                      labelText: 'Provincia',
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: CustomTextField(
                      controller: _operationalCountryController,
                      labelText: 'Paese',
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),

              // Headquarter address
              const Text(
                'Sede Legale',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _headquarterAddressController,
                  labelText: 'Indirizzo',
                ),
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      controller: _headquarterCityController,
                      labelText: 'Città',
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: CustomTextField(
                      controller: _headquarterPostalCodeController,
                      labelText: 'CAP',
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      controller: _headquarterStateController,
                      labelText: 'Provincia',
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: CustomTextField(
                      controller: _headquarterCountryController,
                      labelText: 'Paese',
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),

              // Contact information
              const Text(
                'Informazioni di Contatto',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _phoneController,
                  labelText: 'Telefono',
                  keyboardType: TextInputType.phone,
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _pecController,
                  labelText: 'PEC',
                  keyboardType: TextInputType.emailAddress,
                ),
              ),
              const SizedBox(height: 16),
              SizedBox(
                width: double.infinity,
                child: CustomTextField(
                  controller: _websiteController,
                  labelText: 'Sito Web',
                  keyboardType: TextInputType.url,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
  }

  Widget _buildNavigationButtons() {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          if (_currentStep > 0)
            Expanded(
              child: CustomButton(
                onPressed: _previousStep,
                text: 'Indietro',
                backgroundColor: Colors.grey,
              ),
            ),
          if (_currentStep > 0) const SizedBox(width: 16),
          Expanded(
            child: CustomButton(
              onPressed: _isLoading ? null : _nextStep,
              text: _currentStep == _totalSteps - 1
                  ? 'Completa Registrazione'
                  : 'Avanti',
              backgroundColor: _currentStep == _totalSteps - 1
                  ? Colors.green
                  : Colors.blue,
            ),
          ),
        ],
      ),
    );
  }

  void _previousStep() {
    if (_currentStep > 0) {
      setState(() {
        _currentStep--;
      });
    }
  }

  void _nextStep() async {
    if (_currentStep == _totalSteps - 1) {
      await _completeRegistration();
    } else {
      if (_validateCurrentStep()) {
        setState(() {
          _currentStep++;
        });
      }
    }
  }

  bool _validateCurrentStep() {
    switch (_currentStep) {
      case 0:
        if (_selectedPricing == null) {
          _showError('Seleziona un piano per continuare');
          return false;
        }
        break;
      case 1:
        if (!_personalFormKey.currentState!.validate()) {
          return false;
        }
        break;
      case 2:
        if (!_entityFormKey.currentState!.validate()) {
          return false;
        }
        break;
    }
    return true;
  }

  Future<void> _completeRegistration() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      // 1. Upload profile pictures
      String? personalProfileUrl;
      String? entityProfileUrl;
      String? entityCompanyUrl;

      if (_personalProfilePicture != null) {
        personalProfileUrl = await _imageUploadService.uploadProfilePicture(
          _personalProfilePicture!,
        );
      }
      if (_entityProfilePicture != null) {
        entityProfileUrl = await _imageUploadService.uploadEntityProfilePicture(
          _entityProfilePicture!,
        );
      }
      if (_entityCompanyPicture != null) {
        entityCompanyUrl = await _imageUploadService.uploadEntityCompanyPicture(
          _entityCompanyPicture!,
        );
      }

      // 2. Create user
      final user = AppUser(
        idUser: const Uuid().v4(),
        idUserHash: const Uuid().v4(),
        firstName: _personalNameController.text.split(' ').first,
        lastName: _personalNameController.text.split(' ').length > 1
            ? _personalNameController.text.split(' ').skip(1).join(' ')
            : '',
        email: _personalEmailController.text,
        phone: _personalPhoneController.text,
        profilePicture: personalProfileUrl,
        fullName: _personalNameController.text,
      );

      final createdUser = await _supabaseService.createUser(user.toJson());
      if (createdUser == null) {
        throw Exception('Errore nella creazione dell\'utente');
      }

      // 3. Create legal entity
      final legalEntity = LegalEntity(
        idLegalEntity: const Uuid().v4(),
        idLegalEntityHash: const Uuid().v4(),
        legalName: _legalNameController.text,
        identifierCode: _identifierCodeController.text,
        email: _entityEmailController.text,
        legalRapresentative: _legalRepresentativeController.text,
        operationalAddress: _operationalAddressController.text,
        operationalCity: _operationalCityController.text,
        operationalPostalCode: _operationalPostalCodeController.text,
        operationalState: _operationalStateController.text,
        operationalCountry: _operationalCountryController.text,
        headquarterAddress: _headquarterAddressController.text,
        headquarterCity: _headquarterCityController.text,
        headquarterPostalCode: _headquarterPostalCodeController.text,
        headquarterState: _headquarterStateController.text,
        headquarterCountry: _headquarterCountryController.text,
        phone: _phoneController.text,
        pec: _pecController.text,
        website: _websiteController.text,
        logoPicture: entityProfileUrl,
        companyPicture: entityCompanyUrl,
        status: LegalEntityStatus.pending,
      );

      final createdEntity = await _supabaseService.createLegalEntity(
        legalEntity.toJson(),
      );
      if (createdEntity == null) {
        throw Exception('Errore nella creazione dell\'entità legale');
      }

      // 4. Show success message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Registrazione completata con successo!'),
            backgroundColor: Colors.green,
          ),
        );

        // Navigate to success page or login
        Navigator.pushReplacementNamed(context, '/auth/login');
      }
    } catch (e) {
      print('❌ Error completing registration: $e');
      _showError('Errore durante la registrazione: $e');
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _pickPersonalProfilePicture() async {
    final XFile? image = await _imagePicker.pickImage(
      source: ImageSource.gallery,
      maxWidth: 512,
      maxHeight: 512,
    );

    if (image != null) {
      setState(() {
        _personalProfilePicture = File(image.path);
      });
    }
  }

  Future<void> _pickEntityProfilePicture() async {
    final XFile? image = await _imagePicker.pickImage(
      source: ImageSource.gallery,
      maxWidth: 512,
      maxHeight: 512,
    );

    if (image != null) {
      setState(() {
        _entityProfilePicture = File(image.path);
      });
    }
  }

  Future<void> _pickEntityCompanyPicture() async {
    final XFile? image = await _imagePicker.pickImage(
      source: ImageSource.gallery,
      maxWidth: 1024,
      maxHeight: 1024,
    );

    if (image != null) {
      setState(() {
        _entityCompanyPicture = File(image.path);
      });
    }
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), backgroundColor: Colors.red),
    );
  }
}
